/*
 * ¡¡ IMPORTANTE !!
 * 
 * Se deben importar las librerías de MySQL y la librería de DigitalPersona
 * 
 * VERSIÓN DONDE EL SPLASH SCREEN TIENE EL PROGRESS BAR POR DEFAULT
 * 
 * Y ADEMÁS TIENE LA LIBRERÍA DE UPPER ESSENTIAL.
 * 
 */
package Formularios;

import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import BD.ConexionBD;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.awt.Toolkit;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;


public class Interfaz extends javax.swing.JFrame 
{
    
    //Ventanas de consulta médica, información de todos los pacientes y expandir la tabla de información de paciente identificado.
    final ConsultaMedicaPrevia ventanaPrevia = new ConsultaMedicaPrevia();
    final ConsultaMedicaNueva ventanaNueva = new ConsultaMedicaNueva();
    final ConsultaDescripcion ventanaConsulta = new ConsultaDescripcion();
    String id;
    final ConsultaPaciente ventanaPaciente=new ConsultaPaciente();

    /**
     * Creates new form Interfaz
     */
    public Interfaz() 
    {
        try {
//         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
         
         } catch (Exception e) {
         JOptionPane.showMessageDialog(null, "Imposible modificar el tema visual", "Lookandfeel inválido.",
         JOptionPane.ERROR_MESSAGE);
         }
        initComponents();
        //limpiarJTextArea();
        txtArea.setEditable(false);
        txtAreaInfoPaciente.setEditable(false);
        this.setTitle("Capgras.");
        this.setLocationRelativeTo(Interfaz.this);
        //this.setSize(712,550);
        this.setSize(894, 582);
        this.setResizable(false);
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 12));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //jLabel1.setText("Created by: casablancas & lconder. Powered by labcode ");
        //Image ico = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/capgras.png"));//En las "" va la ruta
        //this.setIconImage(ico);
        //new ImageIcon(getClass().getResource("/logotipo/logo.png")).getImage()
        this.id="";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panBtns = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnIdentificar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnRegistro = new javax.swing.JButton();
        labelCapturando1 = new javax.swing.JLabel();
        labelCapturando2 = new javax.swing.JLabel();
        labelCapturando3 = new javax.swing.JLabel();
        labelListo = new javax.swing.JLabel();
        btnHistorial = new javax.swing.JButton();
        lblImagenHuella = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaInfoPaciente = new javax.swing.JTextArea();
        labelDesconectado = new javax.swing.JLabel();
        labelConectado = new javax.swing.JLabel();
        labelRojo = new javax.swing.JLabel();
        labelVerde = new javax.swing.JLabel();
        labelHuella = new javax.swing.JLabel();
        labelDatos = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage( new ImageIcon(getClass().getResource("/logotipo/capgras.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/iconmonstr-save-2-icon-32.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnIdentificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/iconmonstr-fingerprint-12-icon-32.png"))); // NOI18N
        btnIdentificar.setText("Buscar");
        btnIdentificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentificarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/iconmonstr-logout-icon-32.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/medical14.png"))); // NOI18N
        btnConsulta.setText("Consulta");
        btnConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnIdentificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConsulta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConsulta)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnIdentificar)
                .addGap(18, 18, 18)
                .addComponent(btnSalir)
                .addGap(20, 20, 20))
        );

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 183, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 15, Short.MAX_VALUE)))
        );

        btnRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/registro.png"))); // NOI18N
        btnRegistro.setText("Registrar datos");
        btnRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistroActionPerformed(evt);
            }
        });

        labelCapturando1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/capturando1.png"))); // NOI18N

        labelCapturando2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/capturando1.png"))); // NOI18N

        labelCapturando3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/capturando1.png"))); // NOI18N

        labelListo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/fingerprint21.png"))); // NOI18N

        btnHistorial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/pharmacy8.png"))); // NOI18N
        btnHistorial.setText("Historial");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panBtnsLayout = new javax.swing.GroupLayout(panBtns);
        panBtns.setLayout(panBtnsLayout);
        panBtnsLayout.setHorizontalGroup(
            panBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panBtnsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panBtnsLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panBtnsLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegistro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelCapturando1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCapturando2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCapturando3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelListo)
                        .addGap(20, 20, 20))))
        );
        panBtnsLayout.setVerticalGroup(
            panBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBtnsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panBtnsLayout.createSequentialGroup()
                        .addGroup(panBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRegistro)
                            .addComponent(labelCapturando1)
                            .addComponent(labelCapturando2)
                            .addComponent(labelCapturando3)
                            .addComponent(labelListo)
                            .addComponent(btnHistorial))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.getAccessibleContext().setAccessibleName("Acciones");

        lblImagenHuella.setBackground(new java.awt.Color(0, 0, 0));

        txtAreaInfoPaciente.setColumns(20);
        txtAreaInfoPaciente.setRows(5);
        jScrollPane3.setViewportView(txtAreaInfoPaciente);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        labelDesconectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/link64.png"))); // NOI18N

        labelConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/link68.png"))); // NOI18N

        labelRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/one12.png"))); // NOI18N

        labelVerde.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/fingerprint32.png"))); // NOI18N

        labelHuella.setText("Muestra de la huella");

        labelDatos.setText("Datos del paciente registrado");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logotipo/bd.png"))); // NOI18N
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Created by: casablancas & lconder. Powered by labcode. ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(labelHuella)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelDatos)
                .addGap(165, 165, 165))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panBtns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelDesconectado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelConectado))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelRojo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelVerde)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImagenHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(110, 110, 110))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHuella)
                    .addComponent(labelDatos))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImagenHuella, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panBtns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelConectado)
                            .addComponent(labelDesconectado))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelVerde)
                            .addComponent(labelRojo))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIdentificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentificarActionPerformed
        try {
    identificarHuella();
    //limpiarJTextArea();
    Reclutador.clear();
    } catch (IOException ex) {
    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_btnIdentificarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarHuella1();
        btnRegistro.setEnabled(true);
        ventanaNueva.setVisible(true);
        Reclutador.clear();
        lblImagenHuella.setIcon(null);
        start();
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
         System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Iniciar();
	start();
        EstadoHuellas();
        btnGuardar.setEnabled(false);
        btnRegistro.setEnabled(false);
        btnIdentificar.setEnabled(false);
        btnConsulta.setEnabled(false);
        btnHistorial.setEnabled(false);
//        btnVerificar.setEnabled(false);
        btnSalir.grabFocus();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        stop();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ventanaPrevia.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistroActionPerformed
        // TODO add your handling code here:
        ventanaNueva.setVisible(true);
    }//GEN-LAST:event_btnRegistroActionPerformed

    private void btnConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaActionPerformed
        // TODO add your handling code here:
        ventanaConsulta.setVisible(true);
        
    }//GEN-LAST:event_btnConsultaActionPerformed

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
        // TODO add your handling code here:
        ventanaPaciente.setVisible(true);
        ventanaPaciente.cargar("");
    }//GEN-LAST:event_btnHistorialActionPerformed

//Varible que permite iniciar el dispositivo de lector de huella conectado
// con sus distintos metodos.
private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();

//Varible que permite establecer las capturas de la huellas, para determina sus caracteristicas
// y poder estimar la creacion de un template de la huella para luego poder guardarla
private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();

//Esta variable tambien captura una huella del lector y crea sus caracteristcas para auntetificarla
// o verificarla con alguna guardada en la BD
private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();

//Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
// necesarias de la huella si no ha ocurrido ningun problema
private DPFPTemplate template;
public static String TEMPLATE_PROPERTY = "template";

protected void Iniciar(){
   Lector.addDataListener(new DPFPDataAdapter() {
    @Override public void dataAcquired(final DPFPDataEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    EnviarTexto("Huella Digital capturada.");
    ProcesarCaptura(e.getSample());
    }});}
   });

   Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
    @Override public void readerConnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
    labelConectado.setVisible(true);
    labelDesconectado.setVisible(false);
    }});}
    @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
    labelConectado.setVisible(false);
    labelDesconectado.setVisible(true);
    }});}
   });

   Lector.addSensorListener(new DPFPSensorAdapter() {
    @Override public void fingerTouched(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
    labelVerde.setVisible(true);
    labelRojo.setVisible(false);    
    }});}
    @Override public void fingerGone(final DPFPSensorEvent e) {
    SwingUtilities.invokeLater(new Runnable() {	public void run() {
    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
    labelVerde.setVisible(false);
    labelRojo.setVisible(true); 
    }});}
   });

   Lector.addErrorListener(new DPFPErrorAdapter(){
    public void errorReader(final DPFPErrorEvent e){
    SwingUtilities.invokeLater(new Runnable() {  public void run() {
    EnviarTexto("Error: "+e.getError());
    }});}
   });
}

public void limpiarJTextArea()
{
    //Limpiamos el área de impresión de los datos.
    txtAreaInfoPaciente.setText("");
}

 public DPFPFeatureSet featuresinscripcion;
 public DPFPFeatureSet featuresverificacion;

 public  void ProcesarCaptura(DPFPSample sample)
 {
 // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
 featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

 // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
 featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

 // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
 if (featuresinscripcion != null)
     try{
     System.out.println("Las Caracteristicas de la Huella han sido creada");
     Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear

     // Dibuja la huella dactilar capturada.
     Image image = CrearImagenHuella(sample);
     DibujarHuella(image);
     
//     btnVerificar.setEnabled(true);
     btnIdentificar.setEnabled(true);

     }catch (DPFPImageQualityException ex) {
     System.err.println("Error: "+ex.getMessage());
     }

     finally {
     EstadoHuellas();
     // Comprueba si la plantilla se ha creado.
	switch(Reclutador.getTemplateStatus())
        {
            case TEMPLATE_STATUS_READY:	// informe de éxito y detiene  la captura de huellas
	    stop();
            setTemplate(Reclutador.getTemplate());
	    //EnviarTexto("La Plantilla de la Huella Dactilar ha sido creada.");
            //EnviarTexto("Ya puede Guardarla.");
            EnviarTexto("Ya puede Guardar la Huella, se ha creado con éxito la Plantilla.");
	    btnIdentificar.setEnabled(false);
//            btnVerificar.setEnabled(false);
            
            // Cuando tenemos los 4 templates de la huella, activamos la etiqueta de huella Lista
            // y desactivamos las huellas del proceso de captura.
            labelListo.setEnabled(true);
            labelCapturando1.setEnabled(false);
            labelCapturando2.setEnabled(false);
            labelCapturando3.setEnabled(false);
            
            btnGuardar.setEnabled(true);
            btnGuardar.grabFocus();
            break;

	    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
	    Reclutador.clear();
            stop();
	    EstadoHuellas();
	    setTemplate(null);
	    JOptionPane.showMessageDialog(Interfaz.this, "La Plantilla de la huella no pudo ser creada correctamente. \nRepita el Proceso con el mismo dedo para cada captura.", "Error al guardar la huella.", JOptionPane.ERROR_MESSAGE);
	    start();
	    break;
	}
	     }
}

 public  DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose){
     DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
     try {
      return extractor.createFeatureSet(sample, purpose);
     } catch (DPFPImageQualityException e) {
      return null;
     }
}

  public  Image CrearImagenHuella(DPFPSample sample) {
	return DPFPGlobal.getSampleConversionFactory().createImage(sample);
}

  public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
        image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
 }

public  void EstadoHuellas(){
	//EnviarTexto("Muestra de Huellas Necesarias para Guardar Template "+ Reclutador.getFeaturesNeeded());
        labelListo.setEnabled(false);
        
        if(Reclutador.getFeaturesNeeded()==4)
        {
            labelCapturando1.setEnabled(false);
            labelCapturando2.setEnabled(false);
            labelCapturando3.setEnabled(false);
        }
        
        if(Reclutador.getFeaturesNeeded()==3)
        {
            labelCapturando1.setEnabled(true);
            labelCapturando2.setEnabled(false);
            labelCapturando3.setEnabled(false);
        }
        
        if(Reclutador.getFeaturesNeeded()==2)
        {
            labelCapturando1.setEnabled(true);
            labelCapturando2.setEnabled(true);
            labelCapturando3.setEnabled(false);
        }
        
        if(Reclutador.getFeaturesNeeded()==1)
        {
            labelCapturando1.setEnabled(true);
            labelCapturando2.setEnabled(true);
            labelCapturando3.setEnabled(true);
        }
}

public void EnviarTexto(String string) {
        txtArea.append(string + "\n");
}

//Se inicializa el uso del lector de huellas.
public  void start(){
	Lector.startCapture();
	//EnviarTexto("Lector de huella dactilar listo.");
        EnviarTexto("Se necesitan tomar 4 muestras periódicas de su huella.");
        EnviarTexto("Para elegir la de mejor calidad y guardarla.\n");
        labelVerde.setVisible(false);
}

//Se desactiva el uso del lector de huellas.
public  void stop(){
        Lector.stopCapture();
        EnviarTexto("Lector de huella dactilar desactivado. ");
        labelVerde.setVisible(false);
        labelRojo.setVisible(true);
}

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
	this.template = template;
	firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    //Creamos la instancia 'con' de tipo ConexionBD
    ConexionBD con = new ConexionBD();
    
 /*
  * Guarda los datos de la huella digital actual en la base de datos
  */
    
    public void guardarHuella1(){
     //Obtiene los datos del template de la huella actual
     ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
     Integer tamañoHuella = template.serialize().length;

     //Pregunta el nombre de la persona a la cual corresponde dicha huella
     //String nombre = JOptionPane.showInputDialog("Nombre:");
     try {
     ConexionBD con = new ConexionBD();
     //Establece los valores para la sentencia SQL
     Connection c = con.conectar(); //Establecemos la conexion con la BD
            //Guardamos la huella dactilar en la BD con un id auto incremental.
            try (PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO somhue(huehuella) values(?)",
             //Con la sig. linea, la clave primaria de la tabla se autogenera al hacer el INSERT
             PreparedStatement.RETURN_GENERATED_KEYS)) {
                //guardarStmt.setString(1,nombre);
                guardarStmt.setBinaryStream(1, datosHuella, tamañoHuella);
                //Ejecuta la sentencia
                guardarStmt.executeUpdate();
         }
         
     JOptionPane.showMessageDialog(Interfaz.this,"Se ha guardado la huella con éxito. \nPresione Aceptar para continuar.");
     con.desconectar();
     ventanaNueva.limpiarTextFields();
     btnGuardar.setEnabled(false);
     btnRegistro.setEnabled(false);
//     btnVerificar.grabFocus();
     } catch (SQLException ex) {
     //Si ocurre un error lo indica en la consola
     System.err.println("Error al guardar los datos de la huella.");
     }finally{
     con.desconectar();
     }
   }
    

/**
* Verifica la huella digital actual contra otra en la base de datos
*/
 public void verificarHuella(String nom) {
    try {
    //Establece los valores para la sentencia SQL
    Connection c = con.conectar();
    //Obtiene la plantilla correspondiente a la persona indicada
    PreparedStatement verificarStmt = c.prepareStatement("SELECT huehuella FROM somhue WHERE huenombre = ?");
    verificarStmt.setString(1,nom);
    ResultSet rs = verificarStmt.executeQuery();

    //Si se encuentra el nombre en la base de datos
    if (rs.next()){
    //Lee la plantilla de la base de datos
    byte templateBuffer[] = rs.getBytes("huehuella");
    //Crea una nueva plantilla a partir de la guardada en la base de datos
    DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
    //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
    setTemplate(referenceTemplate);

    // Compara las caracteriticas de la huella recientemente capturda con la
    // plantilla guardada al usuario especifico en la base de datos
    DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

    //compara las plantilas (actual vs bd)
    if (result.isVerified())
    JOptionPane.showMessageDialog(null, "Las huella capturada coinciden con la de "+nom,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
    else
    JOptionPane.showMessageDialog(null, "No corresponde la huella con "+nom, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);

    //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
    } else {
    JOptionPane.showMessageDialog(null, "No existe un registro de huella para "+nom, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
    }
    } catch (SQLException e) {
    //Si ocurre un error lo indica en la consola
    System.err.println("Error al verificar los datos de la huella.");
    }finally{
       con.desconectar();
    }
   }

 /**
  * Identifica a una persona registrada por medio de su huella digital
  */
  public void identificarHuella() throws IOException{
      
    //limpiarJTextArea();
      
     try {
       
         //Encabezados de la tabla
        String [] titulos = {"Id", "Nombre", "Apellidos", "Edad", "Sexo", "Estatura", "Peso", "Alergias", "TipoSangre", "FechaNacimiento", "Teléfono"};
        String [] registros = new String[11];
         
       //Establece los valores para la sentencia SQL
       Connection c = con.conectar();

       PreparedStatement identificarStmt;
       identificarStmt = c.prepareStatement("SELECT huenombre, huehuella FROM somhue");
       //Query
       ResultSet rs = identificarStmt.executeQuery();

       //Si se encuentra el nombre en la base de datos
       while(rs.next())
       {
        //Lee la plantilla de la base de datos
        byte templateBuffer[] = rs.getBytes("huehuella");
        String nombre = rs.getString("huenombre");
        //Crea una nueva plantilla a partir de la guardada en la base de datos
        DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
        //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
        setTemplate(referenceTemplate);

        // Compara las caracteriticas de la huella recientemente capturda con la
        // alguna plantilla guardada en la base de datos que coincide con ese tipo
        DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

        //compara las plantilas (actual vs bd)
        //Si encuentra correspondencia dibuja el mapa
        //e indica el nombre de la persona que coincidió.
            if (result.isVerified())
            {
                
                            //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
             //JOptionPane.showMessageDialog(null, "La huella capturada es de "+nombre,"Verificacion de Huella", JOptionPane.INFORMATION_MESSAGE);
             //cargar();
             //String sql = "SELECT * FROM cliente WHERE nom_cli LIKE '%" +valor+"%";
                 //String sql = "SELECT * FROM somhue WHERE huehuella = "+'"'+referenceTemplate+'"';
                 String sql =  "SELECT * FROM somhue WHERE huenombre = "+'"'+nombre+'"';
                 btnConsulta.setEnabled(true);
                 btnHistorial.setEnabled(true);
                 //Creamos nuestro objeto para la tabla que muestra los datos de la BD
                 //model = new DefaultTableModel(null, titulos);

                 ConexionBD cc = new ConexionBD();
                 Connection cn = cc.conectar();

                 Statement st;
                 limpiarJTextArea();
                 ResultSet rs1=null;
                 try {
                     st = cn.createStatement();
                     rs1 = st.executeQuery(sql);
                     } catch (SQLException ex) {
                     JOptionPane.showMessageDialog(null, ex);
                 }
                     //Inicializamos variable para imprimir en el textArea
                     String imprime = "";
                     imprime = "Nombre(s): ";
                 
                     while(rs1.next())
                     {
     //                    registros[0] = rs1.getString("hueid");
     //                    registros[1] = rs1.getString("huenombre");
     //                    registros[2] = rs1.getString("hueapellidos");
     //                    registros[3] = rs1.getString("hueedad");
     //                    registros[4] = rs1.getString("huesexo");
     //                    registros[5] = rs1.getString("hueestatura");
     //                    registros[6] = rs1.getString("huepeso");
     //                    registros[7] = rs1.getString("huealergias");
     //                    registros[8] = rs1.getString("huetiposangre");
     //                    registros[9] = rs1.getString("huefecha");
     //                    registros[10] = rs1.getString("huetelefono");
                           imprime+= rs1.getString("huenombre")+"\n";
                           imprime+= "Apellidos: ";
                           imprime+= rs1.getString("hueapellidos")+"\n";
                           imprime+= "NSS: ";
                           imprime+= rs1.getString("hueedad")+"\n";
                           imprime+= "Género: ";
                           imprime+= rs1.getString("huesexo")+"\n";
                           imprime+= "Estatura: ";
                           imprime+= rs1.getString("hueestatura")+"\n";
                           imprime+= "Peso: ";
                           imprime+= rs1.getString("huepeso")+"\n";
                           imprime+= "Alergias: ";
                           imprime+= rs1.getString("huealergias")+"\n";
                           imprime+= "Tipo de Sangre: ";
                           imprime+= rs1.getString("huetiposangre")+"\n";
                           imprime+= "Fecha de Nacimiento: ";
                           imprime+= rs1.getString("huefecha")+"\n";
                           imprime+= "Teléfono de emergencia (familiar): ";
                           imprime+= rs1.getString("huetelefono")+"\n";
                           this.id=rs1.getString("hueid");
                     }
                     ventanaConsulta.setId(this.id);
                     ventanaPaciente.setId(this.id);
                     System.out.println("Id en interfaz: "+this.id);
                     //Mandamos la información de la base de datos al JTextArea
                     txtAreaInfoPaciente.setText(imprime);

                 
             return;
         }
       }//fin while
       //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
       JOptionPane.showMessageDialog(null, "No existe ningún registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
       setTemplate(null);
       } catch (SQLException e) {
       //Si ocurre un error lo indica en la consola
       System.err.println("Error al identificar huella dactilar."+e.getMessage());
       }finally{
       con.desconectar();
       }
   }
  
  DefaultTableModel model;
    
    void cargar()
    {
        //Encabezados de la tabla
        String [] titulos = {"Id", "Nombre", "Apellidos", "Edad", "Sexo", "Estatura", "Peso", "Alergias", "TipoSangre", "FechaNacimiento", "Teléfono"};
        String [] registros = new String[11];
        
        //String sql = "SELECT * FROM cliente WHERE nom_cli LIKE '%" +valor+"%";
        String sql = "SELECT * FROM somhue";
        
        //Creamos nuestro objeto para la tabla que muestra los datos de la BD
        model = new DefaultTableModel(null, titulos);
        
        ConexionBD cc = new ConexionBD();
        Connection cn = cc.conectar();
        
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            while(rs.next())
            {
                registros[0] = rs.getString("hueid");
                registros[1] = rs.getString("huenombre");
                registros[2] = rs.getString("hueapellidos");
                registros[3] = rs.getString("hueedad");
                registros[4] = rs.getString("huesexo");
                registros[5] = rs.getString("hueestatura");
                registros[6] = rs.getString("huepeso");
                registros[7] = rs.getString("huealergias");
                registros[8] = rs.getString("huetiposangre");
                registros[9] = rs.getString("huefecha");
                registros[10] = rs.getString("huetelefono");
                model.addRow(registros);
            }
            //tablaDatos.setModel(model);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
  


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsulta;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnIdentificar;
    private javax.swing.JButton btnRegistro;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelCapturando1;
    private javax.swing.JLabel labelCapturando2;
    private javax.swing.JLabel labelCapturando3;
    private javax.swing.JLabel labelConectado;
    private javax.swing.JLabel labelDatos;
    private javax.swing.JLabel labelDesconectado;
    private javax.swing.JLabel labelHuella;
    private javax.swing.JLabel labelListo;
    private javax.swing.JLabel labelRojo;
    private javax.swing.JLabel labelVerde;
    private javax.swing.JLabel lblImagenHuella;
    private javax.swing.JPanel panBtns;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextArea txtAreaInfoPaciente;
    // End of variables declaration//GEN-END:variables
}
